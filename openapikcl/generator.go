package openapikcl

import (
	"fmt"

	"github.com/getkin/kin-openapi/openapi3"
)

// GenerateKCLSchemas iterates over OpenAPI components to generate KCL schemas
func GenerateKCLSchemas(doc *openapi3.T) string {
	output := ""

	// Iterate over components.schemas
	for name, schema := range doc.Components.Schemas {
		output += fmt.Sprintf("\n# KCL Schema for %s\n", name)
		output += generateKCLFromSchema(schema)
	}

	return output
}

// generateKCLFromSchema converts an OpenAPI schema to KCL
func generateKCLFromSchema(schema *openapi3.SchemaRef) string {
	if schema == nil || schema.Value == nil {
		return ""
	}

	kclOutput := "schema AutoGenerated:\n"
	for fieldName, fieldSchema := range schema.Value.Properties {
		var typeStr string
		if fieldSchema.Value.Type != nil && len(*fieldSchema.Value.Type) > 0 {
    			typeStr = (*fieldSchema.Value.Type)[0] // Extract the first type from the slice
		} else {
    			typeStr = "any" // Default fallback type
		}

		kclType := ConvertTypeToKCL(typeStr, fieldSchema.Value.Format)

		kclOutput += fmt.Sprintf("  %s: %s\n", fieldName, kclType)
	}

	return kclOutput
}

