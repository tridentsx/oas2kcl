{
  "$schema": "http://json-schema.org/draft-07/schema",
  "properties": {
    "affinity": {
      "properties": {
        "nodeAffinity": {
          "default": "{}",
          "description": "nodeAffinity rules",
          "type": "object"
        }
      },
      "type": "object"
    },
    "alarms": {
      "properties": {
        "enabled": {
          "default": "true",
          "description": "If enabled, CM Store will produce alarms if errors occurs",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "enum": [
                "true",
                "false"
              ],
              "type": "string"
            }
          ]
        },
        "kafka": {
          "properties": {
            "host": {
              "default": "eric-bss-kafka-proxy-http:80",
              "description": "FQDN of the local kafka proxy including port",
              "type": [
                "string",
                "integer",
                "number"
              ]
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "annotations": {
      "default": "\u003cempty\u003e",
      "description": "List of key/value pairs of annotations appended to every helm resource created by CM Store helm chart",
      "type": [
        "object"
      ]
    },
    "appArmorProfile": {
      "properties": {
        "bamcmstore": {
          "properties": {
            "localhostProfile": {
              "default": "\"\"",
              "description": "Localhost path to the AppArmor profile for the bamcmstore container. Should only be set if appArmorProfile.bamcmstore.type is set to localhost.",
              "type": [
                "string",
                "integer",
                "number"
              ]
            },
            "type": {
              "default": "\"\"",
              "description": "The AppArmor type for the bamcmstore container. Available options are \"unconfined\", \"runtime/default\", \"localhost\" and \"\" [default=\"\"].",
              "type": [
                "string",
                "integer",
                "number"
              ]
            }
          },
          "type": "object"
        },
        "bamcmstorebra": {
          "properties": {
            "localhostProfile": {
              "default": "\"\"",
              "description": "Localhost path to the AppArmor profile for the bamcmstorebra container. Should only be set if appArmorProfile.bamcmstorebra.type is set to localhost.",
              "type": [
                "string",
                "integer",
                "number"
              ]
            },
            "type": {
              "default": "\"\"",
              "description": "The AppArmor type for the bamcmstorebra container. Available options are \"unconfined\", \"runtime/default\", \"localhost\" and \"\" [default=\"\"].",
              "type": [
                "string",
                "integer",
                "number"
              ]
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "brAgent": {
      "properties": {
        "backupTypeList": {
          "default": "cmStore",
          "description": "Backuptype",
          "type": [
            "array"
          ]
        },
        "brLabelValue": {
          "default": "\u003cempty\u003e",
          "description": "Label for bragent",
          "type": [
            "string",
            "integer",
            "number",
            "null"
          ]
        },
        "enabled": {
          "default": "true",
          "description": "Whether to enable bragent",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "enum": [
                "true",
                "false"
              ],
              "type": "string"
            }
          ]
        },
        "productionDate": {
          "default": "PRODDATE",
          "description": "",
          "type": [
            "string",
            "integer",
            "number"
          ]
        }
      },
      "type": "object"
    },
    "fullnameOverride": {
      "default": "\u003cempty\u003e",
      "description": "Overriding the full name",
      "type": [
        "string",
        "integer",
        "number",
        "null"
      ]
    },
    "global": {
      "properties": {
        "annotations": {
          "default": "nil",
          "description": "Global annotations. Global, service level, and resource-specific annotations are merged, no conflicts are allowed.",
          "type": "object"
        },
        "fsGroup": {
          "properties": {
            "manual": {
              "default": "\u003cempty\u003e",
              "description": "Sets a fsGroup ID for all services. If manual set to empty namespace default configuration is used.",
              "type": [
                "string",
                "integer",
                "number",
                "null"
              ]
            },
            "namespace": {
              "default": "\u003cempty\u003e",
              "description": "Sets a fsGroup to use namespace default. The following values are possible: true, false and \"\". If global.fsGroup.namespace set to \"\" or false, namespace default configuration is used.",
              "type": [
                "boolean",
                "null"
              ]
            }
          },
          "type": "object"
        },
        "internalIPFamily": {
          "default": "\u003cempty\u003e",
          "description": "InternalIPFamily configures the IP address family used for cluster-internal IP address. Available values are: IPv4, IPv6, and empty.",
          "enum": [
            "IPv6",
            "IPv4",
            ""
          ],
          "type": [
            "string",
            "null"
          ]
        },
        "labels": {
          "default": "nil",
          "description": "Global labels. Global, service level, and resource-specific labels are merged, no conflicts are allowed.",
          "type": "object"
        },
        "log": {
          "properties": {
            "streamingMethod": {
              "default": "indirect",
              "description": "The global parameter for specifying the streaming method of service logs. It can be 'indirect', 'direct', 'dual', or null. If both global.log.streamingMethod and log.streamingMethod are set to null, it will choose 'indirect' by default",
              "type": "string",
              "enum": [ "indirect", "direct", "dual", "" ]
            }
          }
        },
        "networkPolicy": {
          "properties": {
            "enabled": {
              "default": "false",
              "description": "Global network policy parameter",
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "enum": [
                    "true",
                    "false"
                  ],
                  "type": "string"
                }
              ]
            }
          },
          "type": "object"
        },
        "nodeSelector": {
          "default": "{}",
          "description": "Global node selectors",
          "type": "object"
        },
        "podSecurityContext": {
          "properties": {
            "supplementalGroups": {
              "default": "\u003cempty\u003e",
              "description": "SupplementalGroups is used for setting the GID value(s) for volume data that is used by the services. The value will be merged if both global and local value are set. supplementalGroup will not be set in helmchart if both global and local value are not set.",
              "type": [
                "array",
                "null"
              ]
            }
          },
          "type": "object"
        },
        "pullSecret": {
          "default": "\u003cempty\u003e",
          "description": "PullSecret used when fetching the image",
          "type": [
            "string",
            "integer",
            "number",
            "null"
          ]
        },
        "registry": {
          "properties": {
            "imagePullPolicy": {
              "default": "IfNotPresent",
              "description": "Pull policy for the image",
              "type": [
                "string",
                "integer",
                "number",
                "null"
              ]
            },
            "repoPath": {
              "default": "\u003cempty\u003e",
              "description": "Repo where the image is located",
              "type": [
                "string",
                "integer",
                "number",
                "null"
              ]
            },
            "url": {
              "default": "armdocker.rnd.ericsson.se",
              "description": "Registry url to fetch image from",
              "type": [
                "string",
                "integer",
                "number"
              ]
            }
          },
          "type": "object"
        },
        "security": {
          "properties": {
            "tls": {
              "properties": {
                "enabled": {
                  "default": "true",
                  "description": "Configuration option to enable/disable TLS support",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "enum": [
                        "true",
                        "false"
                      ],
                      "type": "string"
                    }
                  ]
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "securityPolicy": {
          "properties": {
            "rolekind": {
              "default": "\"\"",
              "description": "Configuration of the security policy role kind. The following values are possible: ClusterRole, Role and \"\". Rolebinding will not be created with value \"\".",
              "type": [
                "string",
                "integer",
                "number"
              ]
            }
          },
          "type": "object"
        },
        "timezone": {
          "default": "UTC",
          "description": "Timezone",
          "type": [
            "string",
            "integer",
            "number"
          ]
        },
        "tolerations": {
          "default": "[]",
          "description": "Tolerations for pod assignment, this supports the fullAPI",
          "type": "array"
        }
      },
      "type": "object"
    },
    "imageCredentials": {
      "properties": {
        "bamcmstore": {
          "properties": {
            "registry": {
              "properties": {
                "imagePullPolicy": {
                  "default": "IfNotPresent",
                  "description": "Pull policy for the image",
                  "type": [
                    "string",
                    "integer",
                    "number",
                    "null"
                  ]
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "bamcmstorebra": {
          "properties": {
            "registry": {
              "properties": {
                "imagePullPolicy": {
                  "default": "IfNotPresent",
                  "description": "Pull policy for the image",
                  "type": [
                    "string",
                    "integer",
                    "number",
                    "null"
                  ]
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "pullSecret": {
          "default": "\u003cempty\u003e",
          "description": "PullSecret used when fetching the image",
          "type": [
            "object",
            "string",
            "null"
          ]
        },
        "registry": {
          "properties": {
            "url": {
              "default": "\u003cempty\u003e",
              "description": "Registry url to fetch images from",
              "type": [
                "string",
                "integer",
                "number",
                "null"
              ]
            }
          },
          "type": "object"
        },
        "repoPath": {
          "default": "proj-bam-drop",
          "description": "Repo where the image is located",
          "type": [
            "object",
            "string",
            "null"
          ]
        }
      },
      "type": "object"
    },
    "images": {
      "properties": {
        "bamcmstore": {
          "properties": {
            "name": {
              "default": "eric-bss-bam-cm-store",
              "description": "Docker image name for CMS",
              "type": [
                "string",
                "integer",
                "number",
                "null"
              ]
            },
            "tag": {
              "default": "Same as Chart version",
              "description": "Docker image tag for CMS",
              "type": [
                "string",
                "integer",
                "number",
                "null"
              ]
            }
          },
          "type": "object"
        },
        "bamcmstorebra": {
          "properties": {
            "name": {
              "default": "eric-bss-bam-cm-store",
              "description": "Docker image name for CMS",
              "type": [
                "string",
                "integer",
                "number",
                "null"
              ]
            },
            "tag": {
              "default": "Same as Chart version",
              "description": "Docker image tag for CMS",
              "type": [
                "string",
                "integer",
                "number",
                "null"
              ]
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "labels": {
      "default": "{}",
      "description": "",
      "type": "object"
    },
    "logConnectionTtlMinutes": {
      "default": "120",
      "description": "Log connection TTL (minutes) towards log transformer service. Connection will reset after configured number of minutes. Required when streamingMethod is set to direct or dual",
      "oneOf": [
        {
          "type": "integer"
        },
        {
          "pattern": "^-?\\d+$",
          "type": "string"
        }
      ]
    },
    "logLevel": {
      "default": "info",
      "description": "Log level, possible values are: debug, info, error",
      "type": [
        "string",
        "integer",
        "number"
      ]
    },
    "log": {
      "properties": {
        "streamingMethod": {
          "default": "indirect",
          "description": "The local parameter for specifying the streaming method of service logs. It can be 'indirect', 'direct', 'dual', or null. If set to null, global.log.streamingMethod will be used to determine the streaming method",
          "type": "string",
          "enum": [ "indirect", "direct", "dual", "" ]
        }
      }
    },
    "logQueueSize": {
      "default": "1000",
      "description": "Size of the log queue for streaming. Required when streamingMethod is set to direct or dual",
      "oneOf": [
        {
          "type": "integer"
        },
        {
          "pattern": "^-?\\d+$",
          "type": "string"
        }
      ]
    },
    "logTimeoutSeconds": {
      "default": "5",
      "description": "Timeout waiting for logs to be streamed (in seconds) before terminating. Required when streamingMethod is set to direct or dual",
      "oneOf": [
        {
          "type": "integer"
        },
        {
          "pattern": "^-?\\d+$",
          "type": "string"
        }
      ]
    },
    "logTransformerHost": {
      "default": "eric-log-transformer:5024",
      "description": "FQDN including port number of the log transformer service, don't include protocol. Required when streamingMethod is set to direct or dual",
      "type": [
        "string",
        "integer",
        "number"
      ]
    },
    "logTransformerNoTlsHost": {
      "default": "eric-log-transformer:5025",
      "description": "FQDN including port number of the log transformer non tls service, don't include protocol. Required when streamingMethod is set to direct or dual",
      "type": [
        "string",
        "integer",
        "number"
      ]
    },
    "metrics": {
      "properties": {
        "enabled": {
          "default": "true",
          "description": "This allows the service to increment counters.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "enum": [
                "true",
                "false"
              ],
              "type": "string"
            }
          ]
        },
        "host": {
          "default": "eric-pm-server",
          "description": "Host name of the pm server. this is used for pm metrics access if network policies are in use",
          "type": [
            "string",
            "integer",
            "number"
          ]
        },
        "serviceName": {
          "default": "cm_store",
          "description": "The subsystem name for all the metrics generated by the service to be prefixed",
          "type": [
            "string",
            "integer",
            "number"
          ]
        }
      },
      "type": "object"
    },
    "nameOverride": {
      "default": "\u003cempty\u003e",
      "description": "Name override of the chart",
      "type": [
        "string",
        "integer",
        "number",
        "null"
      ]
    },
    "networkPolicy": {
      "properties": {
        "egress": {
          "properties": {
            "accessLabels": {
              "properties": {
                "bamcmstore": {
                  "default": "{}",
                  "description": "This parameter is a placeholder for adding a list of egress traffic network policy labels. If this service wants to send traffic then it should add all its outgoing traffic network policy access labels using this parameter.",
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "enabled": {
          "default": "true",
          "description": "Network policy. The network policy will be enabled if both networkPolicy.enabled and global.networkPolicy.enabled are set to true.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "enum": [
                "true",
                "false"
              ],
              "type": "string"
            }
          ]
        }
      },
      "type": "object"
    },
    "nodeSelector": {
      "default": "{}",
      "description": "Node selectors",
      "type": "object"
    },
    "persistence": {
      "properties": {
        "persistentVolumeClaim": {
          "properties": {
            "size": {
              "default": "1Gi",
              "description": "",
              "type": [
                "string",
                "integer",
                "number",
                "null"
              ]
            },
            "storageClassName": {
              "default": "\u003cnil\u003e",
              "description": "",
              "type": [
                "string",
                "integer",
                "number",
                "null"
              ]
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "podPriority": {
      "properties": {
        "eric-bss-bam-cm-store": {
          "properties": {
            "priorityClassName": {
              "default": "",
              "description": "The pod priority for the service",
              "type": [
                "string",
                "integer",
                "number",
                "null"
              ]
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "podSecurityContext": {
      "properties": {
        "supplementalGroups": {
          "default": "\u003cempty\u003e",
          "description": "SupplementalGroups is used for setting the GID value(s) for volume data that is used by the services. The value will be merged if both global and local value are set. supplementalGroup will not be set in helmchart if both global and local value are not set.",
          "type": [
            "array",
            "null"
          ]
        }
      },
      "type": "object"
    },
    "probes": {
      "properties": {
        "bamcmstore": {
          "properties": {
            "livenessProbe": {
              "properties": {
                "failureThreshold": {
                  "default": "3",
                  "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded",
                  "oneOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "pattern": "^-?\\d+$",
                      "type": "string"
                    }
                  ]
                },
                "initialDelaySeconds": {
                  "default": "1",
                  "description": "Number of seconds after the container has started before probe is initiated",
                  "oneOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "pattern": "^-?\\d+$",
                      "type": "string"
                    }
                  ]
                },
                "periodSeconds": {
                  "default": "10",
                  "description": "How often (in seconds) to perform the probe",
                  "oneOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "pattern": "^-?\\d+$",
                      "type": "string"
                    }
                  ]
                },
                "timeoutSeconds": {
                  "default": "2",
                  "description": "Number of seconds after which the probe times out",
                  "oneOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "pattern": "^-?\\d+$",
                      "type": "string"
                    }
                  ]
                }
              },
              "type": "object"
            },
            "startupProbe": {
              "properties": {
                "failureThreshold": {
                  "default": "60",
                  "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded",
                  "oneOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "pattern": "^-?\\d+$",
                      "type": "string"
                    }
                  ]
                },
                "initialDelaySeconds": {
                  "default": "5",
                  "description": "Number of seconds after the container has started before probe is initiated",
                  "oneOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "pattern": "^-?\\d+$",
                      "type": "string"
                    }
                  ]
                },
                "periodSeconds": {
                  "default": "5",
                  "description": "How often (in seconds) to perform the probe",
                  "oneOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "pattern": "^-?\\d+$",
                      "type": "string"
                    }
                  ]
                },
                "successThreshold": {
                  "default": "1",
                  "description": "Minimum consecutive successes for the probe to be considered successful after having failed",
                  "oneOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "pattern": "^-?\\d+$",
                      "type": "string"
                    }
                  ]
                },
                "timeoutSeconds": {
                  "default": "2",
                  "description": "Number of seconds after which the probe times out",
                  "oneOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "pattern": "^-?\\d+$",
                      "type": "string"
                    }
                  ]
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "replicaCount": {
      "default": "1",
      "description": "",
      "oneOf": [
        {
          "type": "integer"
        },
        {
          "pattern": "^-?\\d+$",
          "type": "string"
        }
      ]
    },
    "resources": {
      "properties": {
        "bamcmstore": {
          "properties": {
            "limits": {
              "properties": {
                "cpu": {
                  "default": "1",
                  "description": "Limits cpu",
                  "type": [
                    "string",
                    "integer",
                    "number"
                  ]
                },
                "memory": {
                  "default": "512Mi",
                  "description": "Limits memory",
                  "type": [
                    "string",
                    "integer",
                    "number"
                  ]
                }
              },
              "type": "object"
            },
            "requests": {
              "properties": {
                "cpu": {
                  "default": "100m",
                  "description": "Request cpu",
                  "type": [
                    "string",
                    "integer",
                    "number"
                  ]
                },
                "memory": {
                  "default": "256Mi",
                  "description": "Request memory",
                  "type": [
                    "string",
                    "integer",
                    "number"
                  ]
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "bra": {
          "properties": {
            "limits": {
              "properties": {
                "cpu": {
                  "default": "1",
                  "description": "Limits cpu",
                  "type": [
                    "string",
                    "integer",
                    "number"
                  ]
                },
                "memory": {
                  "default": "512Mi",
                  "description": "Limits memory",
                  "type": [
                    "string",
                    "integer",
                    "number"
                  ]
                }
              },
              "type": "object"
            },
            "requests": {
              "properties": {
                "cpu": {
                  "default": "100m",
                  "description": "Request cpu",
                  "type": [
                    "string",
                    "integer",
                    "number"
                  ]
                },
                "memory": {
                  "default": "256Mi",
                  "description": "Request memory",
                  "type": [
                    "string",
                    "integer",
                    "number"
                  ]
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "seccompProfile": {
      "properties": {
        "bamcmstore": {
          "properties": {
            "localhostProfile": {
              "default": "\"\"",
              "description": "Localhost path to the seccomp profile for the bamcmstore container. Should only be set if bamcmstore is set to Localhost.",
              "type": [
                "string",
                "integer",
                "number"
              ]
            },
            "type": {
              "default": "\"\"",
              "description": "Feature of the Linux kernel for secure computing mode for bamcmstore container. Available options are `Unconfined`, `RuntimeDefault` and `Localhost` and \"\" [default=\"\"].",
              "type": [
                "string",
                "integer",
                "number"
              ]
            }
          },
          "type": "object"
        },
        "bamcmstorebra": {
          "properties": {
            "localhostProfile": {
              "default": "\"\"",
              "description": "Localhost path to the seccomp profile for the bamcmstorebra container. Should only be set if bamcmstorebra is set to Localhost.",
              "type": [
                "string",
                "integer",
                "number"
              ]
            },
            "type": {
              "default": "\"\"",
              "description": "Feature of the Linux kernel for secure computing mode for bamcmstorebra container. Available options are `Unconfined`, `RuntimeDefault` and `Localhost` and \"\" [default=\"\"].",
              "type": [
                "string",
                "integer",
                "number"
              ]
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "securityPolicy": {
      "properties": {
        "rolename": {
          "default": "eric-bss-bam-cm-store",
          "description": "Rolename sets the name of the security policy role that is bound to the service account.",
          "type": [
            "string",
            "integer",
            "number"
          ]
        }
      },
      "type": "object"
    },
    "service": {
      "properties": {
        "port": {
          "default": "3000",
          "description": "Service port",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "pattern": "^-?\\d+$",
              "type": "string"
            }
          ]
        },
        "type": {
          "default": "ClusterIP",
          "description": "Service type",
          "type": [
            "string",
            "integer",
            "number"
          ]
        }
      },
      "type": "object"
    },
    "serviceAccount": {
      "properties": {
        "create": {
          "default": "true",
          "description": "",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "enum": [
                "true",
                "false"
              ],
              "type": "string"
            }
          ]
        },
        "name": {
          "default": "Template name",
          "description": "Name of the serviceaccount to be used",
          "type": [
            "string",
            "integer",
            "number",
            "null"
          ]
        }
      },
      "type": "object"
    },
    "terminationGracePeriodSeconds": {
      "default": "30",
      "description": "Number of seconds after SIGTERM caught before shutting down",
      "oneOf": [
        {
          "type": "integer"
        },
        {
          "pattern": "^-?\\d+$",
          "type": "string"
        }
      ]
    },
    "tolerations": {
      "default": "[]",
      "description": "Toleration rules",
      "type": "array"
    },
    "topologySpreadConstraints": {
      "default": "[]",
      "description": "",
      "type": "array"
    },
    "updateStrategy": {
      "properties": {
        "bamcmstore": {
          "properties": {
            "rollingUpdate": {
              "properties": {
                "maxSurge": {
                  "default": "50%",
                  "description": "Update strategy max surge",
                  "type": [
                    "string",
                    "integer",
                    "number"
                  ]
                },
                "maxUnavailable": {
                  "default": "50%",
                  "description": "Update strategy max unavailable",
                  "type": [
                    "string",
                    "integer",
                    "number"
                  ]
                }
              },
              "type": "object"
            },
            "type": {
              "default": "Recreate",
              "description": "Update strategy",
              "type": [
                "string",
                "integer",
                "number"
              ]
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    }
  },
  "type": "object"
}
